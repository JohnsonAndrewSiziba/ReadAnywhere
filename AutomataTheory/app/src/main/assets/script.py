import os

#directory = os.fsencode("./automata_theory")
directory = "./automata_theory"
output_directory = "./output"

def addModal(data):
	if("</body>" in data):
		out = ""
		counter = 0
		static_string = """ <div class="container">
		   <!-- Modal -->
		   <div class="modal fade" id="myModal" role="dialog">
			  <div class="modal-dialog">
				 <!-- Modal content-->
				 <div class="modal-content">
				    <div class="modal-header">
				       <button type="button" class="close" data-dismiss="modal">&times;</button>
				       <h4 class="modal-title">Chapters</h4>
				    </div>
				    <div class="modal-body">
				       <ul class="toc chapters">
				          <li class="heading">Automata Theory Tutorial</li>
				          <li><a href="index.htm">Automata Theory - Home</a></li>
				          <li><a href="automata_theory_introduction.htm">Automata Theory Introduction</a></li>
				          <li><a href="deterministic_finite_automaton.htm">Deterministic Finite Automaton</a></li>
				          <li><a href="non_deterministic_finite_automaton.htm">Non-deterministic Finite Automaton</a></li>
				          <li><a href="ndfa_to_dfa_conversion.htm">NDFA to DFA Conversion</a></li>
				          <li><a href="dfa_minimization.htm">DFA Minimization</a></li>
				          <li><a href="moore_and_mealy_machines.htm">Moore &amp; Mealy Machines</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Classification of Grammars</li>
				          <li><a href="introduction_to_grammars.htm">Introduction to Grammars</a></li>
				          <li><a href="language_generated_by_grammars.htm">Language Generated by Grammars</a></li>
				          <li><a href="chomsky_classification_of_grammars.htm">Chomsky Grammar Classification</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Regular Grammar</li>
				          <li><a href="regular_expressions.htm">Regular Expressions</a></li>
				          <li><a href="regular_sets.htm">Regular Sets</a></li>
				          <li><a href="ardens_theorem.htm">Arden's Theorem</a></li>
				          <li><a href="constructing_fa_from_re.htm">Constructing FA from RE</a></li>
				          <li><a href="pumping_lemma_for_regular_grammar.htm">Pumping Lemma for Regular Grammar</a></li>
				          <li><a href="dfa_complement.htm">DFA Complement</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Context-Free Grammars</li>
				          <li><a href="context_free_grammar_introduction.htm">Context-Free Grammar Introduction</a></li>
				          <li><a href="ambiguity_in_grammar.htm">Ambiguity in Grammar</a></li>
				          <li><a href="cfl_closure_properties.htm">CFL Closure Properties</a></li>
				          <li><a href="cfg_simplification.htm">CFG Simplification</a></li>
				          <li><a href="chomsky_normal_form.htm">Chomsky Normal Form</a></li>
				          <li><a href="greibach_normal_form.htm">Greibach Normal Form</a></li>
				          <li><a href="pumping_lemma_for_cfg.htm">Pumping Lemma for CFG</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Pushdown Automata</li>
				          <li><a href="pushdown_automata_introduction.htm">Pushdown Automata Introduction</a></li>
				          <li><a href="pushdown_automata_acceptance.htm">Pushdown Automata Acceptance</a></li>
				          <li><a href="pda_context_free_grammar.htm">PDA &amp; Context Free Grammar</a></li>
				          <li><a href="pda_and_parsing.htm">PDA &amp; Parsing</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Turing Machine</li>
				          <li><a href="turing_machine_introduction.htm">Turing Machine Introduction</a></li>
				          <li><a href="accepted_and_decided_language.htm">Accepted &amp; Decided Language</a></li>
				          <li><a href="multi_tape_turing_machine.htm">Multi-tape Turing Machine</a></li>
				          <li><a href="multi_track_turing_machine.htm">Multi-Track Turing Machine</a></li>
				          <li><a href="non_deterministic_turing_machine.htm">Non-Deterministic Turing Machine</a></li>
				          <li><a href="semi_infinite_tape_turing_machine.htm">Semi-Infinite Tape Turing Machine</a></li>
				          <li><a href="linear_bounded_automata.htm">Linear Bounded Automata</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Decidability</li>
				          <li><a href="language_decidability.htm">Language Decidability</a></li>
				          <li><a href="undecidable_languages.htm">Undecidable Language</a></li>
				          <li><a href="turing_machine_halting_problem.htm">Turing Machine Halting Problem</a></li>
				          <li><a href="rice_theorem.htm">Rice Theorem</a></li>
				          <li><a href="post_correspondence_problem.htm">Post Correspondence Problem</a></li>
				       </ul>
				       <ul class="toc chapters">
				          <li class="heading">Automata Theory Useful Resources</li>
				          <li><a href="automata_theory_quick_guide.htm">Automata Theory - Quick Guide</a></li>
				       </ul>
				    </div>
				    <div class="modal-footer">
				       <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
				    </div>
				 </div>

			  </div>
		   </div>

		</div> """

		data = data.split("</body>")
		for s in data:
			if(counter == 0):
				s += static_string + "\n</body>"
			out += s
			counter += 1
		return out
	else:
		return data
	
def modifyCss(data):
	counter = 0
	out = ""
	data = data.split("#")
	for s in data:
		s = s.strip()
		if(s == "004d99;"):
			out += "#022A51;"
		else:
			if(counter == 0):
				out += s
			else:
				out += "#" + s
		counter += 1
	return out
	
def staticFiles(data):
	if("</head>" in data):
		out = ""
		counter = 0
		bootstrap_css = '<link rel="stylesheet" href="../bootstrap.min.css">' + "\n"
		jquery = '<script src="../jquery.min.js"></script>' + "\n"
		bootstrap_js = '<script src="../bootstrap.min.js"></script>' + "\n"
		masterstyle = '<link rel="stylesheet" href="../style.css">' + "\n"
		masterscript = '<script src="../js/javascript.js"></script>' + "\n"
		static_string = bootstrap_css + jquery + bootstrap_js + masterstyle + masterscript + "\n</head>"

		data = data.split("</head>")
		for s in data:
			if(counter == 0):
				s += static_string
			out += s
			counter += 1
		return out
	else:
		return data
		
def tutorialsPoint(data):
	data = data.replace("tutorialspoint", "")
	data = data.replace("Tutorialspoint", "")
	data = data.replace("TutorialsPoint", "")
	data = data.replace("TUTORIALSPOINT", "")
	return data
   
for file in os.listdir(directory):
	filename = os.fsdecode(file)
	if filename.endswith(".htm") or filename.endswith(".html"): 
		print(os.path.join(directory, filename))
		file_contents = "";
		with open(os.path.join(directory, filename), "r", encoding="utf8", errors='ignore') as a_file:
			for line in a_file:
				stripped_line = line.strip()
				line = modifyCss(stripped_line)
				line = staticFiles(line)
				line = addModal(line)
				line = tutorialsPoint(line)
				file_contents += line + "\n"
				
		file = open(os.path.join(output_directory, filename), "w", encoding="utf8", errors='ignore') 
		file.write(file_contents) 
		file.close() 
		continue
	else:
		continue
	
	
	
